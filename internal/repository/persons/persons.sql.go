// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: persons.sql

package persons

import (
	"context"
	"database/sql"
)

const deletePerson = `-- name: DeletePerson :execresult
DELETE FROM persons WHERE id = ?
`

func (q *Queries) DeletePerson(ctx context.Context, id int64) (sql.Result, error) {
	return q.exec(ctx, q.deletePersonStmt, deletePerson, id)
}

const insertPerson = `-- name: InsertPerson :one
INSERT INTO persons (fname, lname, email)
VALUES (
    ?, ?, ?
) RETURNING id, fname, lname, email, created_at, updated_at
`

type InsertPersonParams struct {
	Fname string
	Lname string
	Email string
}

// add person into database
func (q *Queries) InsertPerson(ctx context.Context, arg *InsertPersonParams) (*Person, error) {
	row := q.queryRow(ctx, q.insertPersonStmt, insertPerson, arg.Fname, arg.Lname, arg.Email)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Lname,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const readPerson = `-- name: ReadPerson :one
SELECT id, fname, lname, email, created_at, updated_at
FROM persons
WHERE id = ?
`

func (q *Queries) ReadPerson(ctx context.Context, id int64) (*Person, error) {
	row := q.queryRow(ctx, q.readPersonStmt, readPerson, id)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Lname,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updatePerson = `-- name: UpdatePerson :one
UPDATE persons
SET 
    fname = ?,
    lname = ?,
    email = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, fname, lname, email, created_at, updated_at
`

type UpdatePersonParams struct {
	Fname string
	Lname string
	Email string
	ID    int64
}

func (q *Queries) UpdatePerson(ctx context.Context, arg *UpdatePersonParams) (*Person, error) {
	row := q.queryRow(ctx, q.updatePersonStmt, updatePerson,
		arg.Fname,
		arg.Lname,
		arg.Email,
		arg.ID,
	)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Lname,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
